q
article.comments.new(comment_params)
nil.to_i
q
article.total_comments.to_i
article.total_comments
q
comment.country
c
comment.valid?
q
comment.errors.full_messages
comment.errors
q
comment.valid?
comment.article_id = article.id
[200~comment.article_id = article.id~
comment.valid?
comment = Comment.new(comment_params)
comment.valid?
c
comment.valid?
comment.errors
q
comment.errors.full_messages
q
comment.email.valid?
comment.email
comment.errors.full_messages
comment.errors
comment.valid?
q
comment.errors
comment.valid?
comment.valid??
q
comment.body_valid?
comment.valid?
q
comment.valid?
body
comment.valid?
q
comment.valid?
comment.errors
q
qy
comment.errors.full_messages
q
pp comment
q
comment.valid?
q
comment.valid?
c
comment.valid?
q
comment.errors
comment.valid?
comment.errors
comment.errors.full_messages
q
comment.errors.full_messages
comment.errors
comment.valid?
pp comment
q
pp comment
comment
comment.valid?
q
article.valid?
article.end_hour = "17:00:00"
expect { article.valid? }.to raise_error(ActiveModel::StrictValidationFailed, "End hour can't be blank")
expect(article.valid?).to raise_error(ActiveModel::StrictValidationFailed, "End hour can't be blank")
article.errors.full_messages
article.valid?
article.errors
article.valid?
q
article.valid?
q
Article.new.valid?
q
Article.new.valid?
q
Article.new.valid?
q
Article.new.valid?
article.valid?
c
article.save
article.errors.full_messages
q
article.save
article.errors.full_messages
q
article.errors.full_messages
article.errors
article.save
article
q
article.save
q
article.save
article
article.save
article.valid?
comment.valid?
q
comment.valid?
q
comment.valid?
q
comment.valid?
comment.errors.full_messages
q
article.errors.full_messages
q
article.errors.full_messages
q
article.errors.full_messages
q
comment.errors.full_messages
comment.valid?
q
comment.errors.full_messages
comment.valid?
q
article_2.errors.full_messages
article_2.invalid?
article_2.invalid
q
Article.second
Article.first
Article.all.count
article.count
article.id
Article.where(title: 'Benefit of cooking food').count
Article.where(title: 'Benefit of cooking food')
article.errors.full_messages
q
article.errors.full_messages
q
article.errors.full_messages
q
article
q
errors.full_message(:url, "#{forbid} is reserved")
errors.full_messages
c
forbid
q
w
q
y
q
u
w
errors.full_messages_for(:url)
errors.full_messages
errors
q
y
article.errors.full_messages[0]
article.errors.full_messages
article.errors
c
q
article.errors.full_messages
article.errors
article.errors.full_messages
article.errors.full_messages[0]
article.valid?
q
%w[www us].include? ('www.ruby-learn.us')
%w[www us].include? ('www')
%w[www us].include? (www)
%w[www us].include? ('www')
%w[www us]
article.url
q
article.errors.full_messages[0]
article.invalid?
article
q
article.errors.full_messages[0]
article.invalid?
article.error
article.errors.full_messages
article.errors
article.save
article.errors
c
q
article.end_hour > article.start_hour
article.end_hour
article.start_hour
c
@comment.errors
q
render 'articles/show'
article_path(@article)
c
render :new
:new
c
article_path(@article)
article_path
c
value
message
c
@comment.errors.full_messages.class
q
@comment.errors.full_messages
@comment.errors
@comment
@comment.errors.full_messages_for(:body)
@comment.errors.full_messages.join(', ')
@comment.errors
q
params['article']['title']
params['article']
params
