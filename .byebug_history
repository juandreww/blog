q
journalists.present?
journalists.valid?
journalists
PictureJpg.first
picture_jpg
q
picture
q
certificate.journalist_previously_changed?
certificate.journalist_changed?
certificate_journalist_changed?
certificate.journalist
certificate.save
certificate.journalist_changed?
certificate.journalist
certificate
q
certificate.journalist_changed?
certificate.reload_journalist
certificate.journalist=
certificate.journalist
certificate.author
certificate.association
q
certificate
q
Picture.second
Picture.first
Picture.all
Picture.new
q
Company.first
journalist.companies
q
journalist.companies
journalists.companies
company.journalists
company.companies_journalists
CompanyJournalist
companies_journalists
company
journalist.companies
q
journalist
journalist.device
journalist.account
q
journalist.device.new
journalist.device
q
index
q
journalist.articles.size
journalist.articles
q
article.errors
article
index
q
journalist.articles
journaliast.articles
Article.first
article.release_schedules
ReleaseSchedule.first
release_schedule.first
pp article
q
Log.find!(2)
Log.find1(2)
Log.find(2)
Log.find(1)
Log.first
Log.second
Log.first
Log.all.size
q
comment
Comment.all.size
Article.all.size
article.count
Log.all.count
Log.count
Log.all
c
q
self.frequency_to_be_found = frequency_to_be_found.to_i + 1
frequency_to_be_found.to_i +1
frequency_to_be_found.to_i
frequency_to_be_found += 1
frequency_to_be_found
q
article
q
article.comments.new(comment_params)
nil.to_i
q
article.total_comments.to_i
article.total_comments
q
comment.country
c
comment.valid?
q
comment.errors.full_messages
comment.errors
q
comment.valid?
comment.article_id = article.id
[200~comment.article_id = article.id~
comment.valid?
comment = Comment.new(comment_params)
comment.valid?
c
comment.valid?
comment.errors
q
comment.errors.full_messages
q
comment.email.valid?
comment.email
comment.errors.full_messages
comment.errors
comment.valid?
q
comment.errors
comment.valid?
comment.valid??
q
comment.body_valid?
comment.valid?
q
comment.valid?
body
comment.valid?
q
comment.valid?
comment.errors
q
qy
comment.errors.full_messages
q
pp comment
q
comment.valid?
q
comment.valid?
c
comment.valid?
q
comment.errors
comment.valid?
comment.errors
comment.errors.full_messages
q
comment.errors.full_messages
comment.errors
comment.valid?
pp comment
q
pp comment
comment
comment.valid?
q
article.valid?
article.end_hour = "17:00:00"
expect { article.valid? }.to raise_error(ActiveModel::StrictValidationFailed, "End hour can't be blank")
expect(article.valid?).to raise_error(ActiveModel::StrictValidationFailed, "End hour can't be blank")
article.errors.full_messages
article.valid?
article.errors
article.valid?
q
article.valid?
q
Article.new.valid?
q
Article.new.valid?
q
Article.new.valid?
q
Article.new.valid?
article.valid?
c
article.save
article.errors.full_messages
q
article.save
article.errors.full_messages
q
article.errors.full_messages
article.errors
article.save
article
q
article.save
q
article.save
article
article.save
article.valid?
comment.valid?
q
comment.valid?
q
comment.valid?
q
comment.valid?
comment.errors.full_messages
q
article.errors.full_messages
q
article.errors.full_messages
q
article.errors.full_messages
q
comment.errors.full_messages
comment.valid?
q
comment.errors.full_messages
comment.valid?
q
article_2.errors.full_messages
article_2.invalid?
article_2.invalid
q
Article.second
Article.first
Article.all.count
article.count
article.id
Article.where(title: 'Benefit of cooking food').count
Article.where(title: 'Benefit of cooking food')
article.errors.full_messages
q
article.errors.full_messages
q
article.errors.full_messages
q
article
q
errors.full_message(:url, "#{forbid} is reserved")
errors.full_messages
c
forbid
q
w
q
y
q
u
w
errors.full_messages_for(:url)
errors.full_messages
errors
q
