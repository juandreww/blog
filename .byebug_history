c
Drink.find_by(id: params['id'])
[200~Drink.find_by(id: params['id'])~
params['id']
params
c
create_params
c
@create_params
q
create_params
params
@create_params
c
params['drink']
params('drink')
params.permit('drink')
params.permit(:drink)
params
permitted_params
params
c
q
part_time_delivery_man.methods
part_time_delivery_man
part_time_delivery_man.on_the_way
part_time_delivery_man.ready?
part_time_delivery_man
q
expect(part_time_delivery_man).to receive(:turn_on_vehicle_engine).once
expect(part_time_delivery_man).to receive(turn_on_vehicle_engine).once
part_time_delivery_man.instance_of?
part_time_delivery_man.on_the_way
part_time_delivery_man.methods
part_time_delivery_man.methosd
part_time_delivery_man
q
delivery_man.ready?
delivery_man
@delivery_man
q
delivery_man
q
delivery_man
q
stuntman
stuntman.trust
stuntman.untrust
suntman.untrust
stuntmant.untrust
stuntman.methods
stuntman
q
20.times
20.times 2
20.methods
q
rspec blog/spec/respond_to_matcher_spec.rb
subject.global_variables
subject.local_variables
subject.private_methods
subject.public_methods
subject.methods
subject
expect { integer_minus_integer }.to eq(9_000)
integer_minus_integer
c
q
matrices.map { |matrice| matrice[1][:age] }
q
y
matrices.map { |matrice| matrice[1] }
matrices.map { |matrice| matrice[1][:age] }
matrices[0][1][:age]
matrices[0][1]
matrices[0][:age]
matrices[0][0]
matrices[1]
matrices[0]
matrices.map { |matrice| matrice[:age] }
matrices[0]
matrices
expect(pokemon_lists).to have_attributes(age: 17)
pokemon_lists
pokemon_lists[:tamer].attribute
pokemon_lists[:tamer].attributes
pokemon_lists[:tamer]
pokemon_lists
pokemon_lists.attribute
pokemon_lists.attributes
pokemon_lists
q
pp subject
subject
q
subject
q
expect(subject).to eq(bob)
bob
[1,3].reverse
[1,3].rotate
subject.methods
q
subject.class
subject.name
subject.push('aa')
q
subject.length
subject.push('apalagi')
subject
subject.push('anjay')
subject.name
subject.push
subject.class
subject
c
q
card
q
Comment.count
Article.count
Article.first
pp abc
abc = article_with_comments.explain
article_with_comments.explain
q
article_with_comments.explain
q
article_with_comments.as_json
article_with_comments.as_json\
q
article_with_comments.as_json
q
article_with_comments.as_json
q
article_with_comments.as_json
q
article_with_comments.as_json
article_with-comments.as_json
article_with_comments['title']
article_with_comments['title]
article_with_comments.title
article_with_comments
q
Journalist.all.map(&:id)
journalists
q
journalists.rewhere('salary 100_000_000)
q
journalists.rewhere('salary > ?', 100_000_000)
journalists.rewhere('salary > ?', 100_000_000
q
expect { journalists.reselect(:name)
                        .last.salary }
                        .to raise_error(ActiveModel::MissingAttributeError)
expect(journalists.reselect(:name)
                        .last.salary)
                        .to raise_error(ActiveModel::MissingAttributeError)
journalists.reselect(:name).last&.salary
journalists.reselect(:name).last&.name
journalists.reselect(:name).last
journalists.reselect(:name)
q
journalists.last
q
0.1e2 == 10
journalists.order(salary: :desc).first
journalists.order(salary: :desc).last
journalists.order(salary: :desc)
journalists.first
journalists.last
journalists.map(&:salary)
journalists.map(&:name).tally
journalists.map(&:name)
journalists
journalists.first
journalists[3]
journalists[2]
journalists.second
journalists.last
journalists.size
journalists[0].name
q
journalists[0].name
q
journalists[0].name
journalists[0]
journalists
journalists.to_sql
q
journalists[0].name
q
journalists[0].name
q
journalists[0].name
journalists[0]
journalists
q
journalists[0]
journalists.to_sql
journalists.inspect
journalists
journalists.explain
journalists
q
journalists
q
journalists.first
journalists
q
journalists.count
q
journalists.count
journalists
q
journalists
q
journalists.first
q
Journalist.last.salary
Journalist.first.salary.to_s
Journalist.first.salary.to_d
Journalist.first.salary
Journalist.where(salary: (50000000).to_d)
Journalist.where(salary: 50_000_000.to_d)
journalists = Journalist.where(salary: 50_000_000.to_d..)
50_000_000.to_d
50.to_d
journalists = Journalist.where(salary: 50000000..)
journalists
Journalist.first
q
Journalist.first!
Journalist.first!(3)
Journalist.first!
q
Journalist.take
Journalist.second
Journalist.first
Journalist.take
journalists
q
journalists.present?
journalists.valid?
journalists
PictureJpg.first
picture_jpg
q
picture
q
certificate.journalist_previously_changed?
certificate.journalist_changed?
certificate_journalist_changed?
certificate.journalist
certificate.save
certificate.journalist_changed?
